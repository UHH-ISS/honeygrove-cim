from datetime import datetime
import glob
import hashlib
import json
import os
import subprocess
import time


def check_file_for_malware(malware_file, es_instance):
    # big files are divided into smaller blocks to save memory.
    BLOCKSIZE = 65536
    hasher = hashlib.sha1()
    timestamp = datetime.utcnow().isoformat()

    # read the file und hash the blocks
    with open(malware_file, 'rb') as fp:
        buf = fp.read(BLOCKSIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = fp.read(BLOCKSIZE)

    whois = ['whois', '-h', 'hash.cymru.com', hasher.hexdigest()]
    whois = " ".join(whois)

    # result auf the whois inquiry
    try:
        stdoutdata = subprocess.check_output(whois, shell=True, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        stdoutdata = e.output

    # split our output into 3 strings.
    hash = str(stdoutdata.decode().split(' ')[0])
    found = str(stdoutdata.decode().split(' ')[1])
    percent = str(stdoutdata.decode().replace('NO_DATA', '\n').replace('\n', '').split(' ')[2])
    infolink = 'https://www.virustotal.com/en/search/?query=' + hash        # Warning of virustotal

    # convert the timestamp from unix epoch to gmt datetime.
    found_date = time.strftime('%Y-%m-%dT%H:%M:%S.000000', time.gmtime(int(found)))

    # parsing of elasticsearch compatibel logs.
    bmessage = json.dumps(
            {'@timestamp': timestamp, 'hash': hash, 'percent': percent, 'found_date': found_date,
             'infolink': infolink, 'filename': '%s.file' % timestamp})

    try:
        # send logs to elasticsearch
        es_instance.index(index='honeygrove', doc_type='malware', body=bmessage)
    except Exception:
        # XXX: Handle this appropriately
        pass
